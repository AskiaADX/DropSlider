/* standard.css */
{%
Dim responseColourPrimary =CurrentADC.PropValue("responseColourPrimary")
Dim responseColourSecondary =CurrentADC.PropValue("responseColourSecondary")
Dim fontColour =CurrentADC.PropValue("fontColour")
Dim responseShadow =CurrentADC.PropValue("responseShadow")
Dim responseSelectedColourPrimary =CurrentADC.PropValue("responseSelectedColourPrimary")
Dim responseSelectedColourSecondary =CurrentADC.PropValue("responseSelectedColourSecondary")
Dim responseSelectedFontColour =CurrentADC.PropValue("responseSelectedFontColour")
Dim responseSelectedShadow =CurrentADC.PropValue("responseSelectedShadow")

Dim borderColour =CurrentADC.PropValue("borderColour")
Dim borderThickness =CurrentADC.PropValue("borderThickness")
Dim borderStyle =CurrentADC.PropValue("borderStyle")
Dim responseSelectedBorderColour =CurrentADC.PropValue("responseSelectedBorderColour")
Dim responseSelectedBorderThickness =CurrentADC.PropValue("responseSelectedBorderThickness")
Dim responseSelectedBorderStyle =CurrentADC.PropValue("responseSelectedBorderStyle")
Dim borderRadius =CurrentADC.PropValue("borderRadius")

Dim responseTextAlign =CurrentADC.PropValue("responseTextAlign")
Dim responseImageAlignment =CurrentADC.PropValue("responseImageAlignment")
Dim responseAlign =CurrentADC.PropValue("responseAlign")
Dim displayResponseText =CurrentADC.PropValue("displayResponseText")
Dim responseTextPosition =CurrentADC.PropValue("responseTextPosition")

Dim responseHoverColourPrimary =CurrentADC.PropValue("responseHoverColourPrimary")
Dim responseHoverColourSecondary =CurrentADC.PropValue("responseHoverColourSecondary")
Dim responseHoverFontColour =CurrentADC.PropValue("responseHoverFontColour")
Dim responseHoverBorderColour =CurrentADC.PropValue("responseHoverBorderColour")
Dim responseHoverBorderThickness =CurrentADC.PropValue("responseHoverBorderThickness")
Dim responseHoverBorderStyle =CurrentADC.PropValue("responseHoverBorderStyle")
Dim responseHoverShadow =CurrentADC.PropValue("responseHoverShadow")

Dim showResponseHoverColour =CurrentADC.PropValue("showResponseHoverColour")
Dim showResponseHoverFontColour =CurrentADC.PropValue("showResponseHoverFontColour")
Dim showResponseHoverBorder =CurrentADC.PropValue("showResponseHoverBorder")

Dim responseMargin =CurrentADC.PropValue("responseMargin")
Dim responsePadding =CurrentADC.PropValue("responsePadding")
Dim responseTextPadding =CurrentADC.PropValue("responseTextPadding")
Dim responseImagePadding =CurrentADC.PropValue("responseImagePadding")

Dim responseTextLineHeight =CurrentADC.PropValue("responseTextLineHeight")

Dim fontSize =CurrentADC.PropValue("fontSize")
Dim responseHeight =CurrentADC.PropValue("responseHeight")
Dim responseWidth =CurrentADC.PropValue("responseWidth")
Dim labelColourPrimary =CurrentADC.PropValue("labelColourPrimary")
Dim labelColourSecondary =CurrentADC.PropValue("labelColourSecondary")
Dim labelShadow =CurrentADC.PropValue("labelShadow")
Dim textAlign =CurrentADC.PropValue("textAlign")
Dim imageAlign =CurrentADC.PropValue("imageAlign")
Dim displayLabelText =CurrentADC.PropValue("displayLabelText")

Dim baseHeight =CurrentADC.PropValue("baseHeight")

Dim labelTextPadding =CurrentADC.PropValue("labelTextPadding")
Dim labelTextLineHeight =CurrentADC.PropValue("labelTextLineHeight")

Dim labelWidth =CurrentADC.PropValue("labelWidth")
Dim sliderHeight =CurrentADC.PropValue("sliderHeight")
Dim sliderOrientation =CurrentADC.PropValue("sliderOrientation")
Dim controlAlign =CurrentADC.PropValue("controlAlign")
Dim sliderBasePrimaryColour =CurrentADC.PropValue("sliderBasePrimaryColour")
Dim sliderBaseSecondaryColour =CurrentADC.PropValue("sliderBaseSecondaryColour")
Dim sliderBaseBorderColour =CurrentADC.PropValue("sliderBaseBorderColour")
Dim sliderBaseBorderThickness =CurrentADC.PropValue("sliderBaseBorderThickness")
Dim sliderBaseBorderStyle =CurrentADC.PropValue("sliderBaseBorderStyle")
Dim sliderBaseBorderRadius =CurrentADC.PropValue("sliderBaseBorderRadius")
Dim sliderHandlePrimaryColour =CurrentADC.PropValue("sliderHandlePrimaryColour")
Dim sliderHandleSecondaryColour =CurrentADC.PropValue("sliderHandleSecondaryColour")
Dim sliderHandleBorderColour =CurrentADC.PropValue("sliderHandleBorderColour")
Dim sliderHandleBorderThickness =CurrentADC.PropValue("sliderHandleBorderThickness")
Dim sliderHandleBorderStyle =CurrentADC.PropValue("sliderHandleBorderStyle")
Dim sliderHandleBorderRadius =CurrentADC.PropValue("sliderHandleBorderRadius")
Dim sliderHandleDropShadow =CurrentADC.PropValue("sliderHandleDropShadow")
Dim sliderSelectedPrimaryColour =CurrentADC.PropValue("sliderSelectedPrimaryColour")
Dim sliderSelectedSecondaryColour =CurrentADC.PropValue("sliderSelectedSecondaryColour")
Dim labelBorderRadius =CurrentADC.PropValue("labelBorderRadius")
Dim labelFontColour =CurrentADC.PropValue("labelFontColour")
Dim labelBorderColour =CurrentADC.PropValue("labelBorderColour")
Dim labelBorderThickness =CurrentADC.PropValue("labelBorderThickness")
Dim labelBorderStyle =CurrentADC.PropValue("labelBorderStyle")

Dim baseColourPrimary =CurrentADC.PropValue("baseColourPrimary")
Dim baseColourSecondary =CurrentADC.PropValue("baseColourSecondary")
Dim baseBorderColour =CurrentADC.PropValue("baseBorderColour")
Dim baseBorderThickness =CurrentADC.PropValue("baseBorderThickness")
Dim baseBorderStyle =CurrentADC.PropValue("baseBorderStyle")

Dim showValue =CurrentADC.PropValue("showValue")

Dim sliderFocusPrimaryColour =CurrentADC.PropValue("sliderFocusPrimaryColour")
Dim sliderFocusSecondaryColour =CurrentADC.PropValue("sliderFocusSecondaryColour")
Dim sliderFocusBorderColour =CurrentADC.PropValue("sliderFocusBorderColour")
Dim sliderFocusBorderThickness =CurrentADC.PropValue("sliderFocusBorderThickness")
Dim handleFontColour =CurrentADC.PropValue("handleFontColour")

Dim captionAlign =CurrentADC.PropValue("captionAlign")
Dim captionPadding =CurrentADC.PropValue("captionPadding")

Dim sliderBaseHeight =CurrentADC.PropValue("sliderBaseHeight")
Dim sliderHandleHeight =CurrentADC.PropValue("sliderHandleHeight")
Dim sliderHandleWidth =CurrentADC.PropValue("sliderHandleWidth")
Dim halfHandleHeight = (sliderBaseHeight.ToNumber() - sliderHandleHeight.ToNumber())/2
Dim halfHandleWidth = sliderHandleWidth.ToNumber()/2
IF CurrentADC.PropValue("sliderOrientation") = "vertical" Then
	Dim sliderHandleBorderThicknessNumber = sliderHandleBorderThickness
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("px","")
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("%","")
		sliderHandleBorderThicknessNumber = sliderHandleBorderThicknessNumber.Replace("none","0")
	halfHandleWidth = ((sliderHandleWidth.ToNumber() + (sliderHandleBorderThicknessNumber.ToNumber()*2)) - sliderBaseHeight.ToNumber() )/2
	halfHandleHeight = (sliderHandleHeight.ToNumber() + (sliderHandleBorderThicknessNumber.ToNumber()*2))/2
EndIF

Dim imagePadding =CurrentADC.PropValue("imagePadding")

Dim sliderBaseGradientDirection =CurrentADC.PropValue("sliderBaseGradientDirection")
Dim handleColour =CurrentADC.PropValue("handleColour")
Dim handleBorderColour =CurrentADC.PropValue("handleBorderColour")
Dim handleBorderRadius =CurrentADC.PropValue("handleBorderRadius")
Dim handleWidth =CurrentADC.PropValue("handleWidth")
Dim handleHeight =CurrentADC.PropValue("handleHeight")
Dim alternateMarkers =CurrentADC.PropValue("alternateMarkers")
Dim markerType =CurrentADC.PropValue("markerType")
Dim markerDistance =CurrentADC.PropValue("markerDistance")
Dim markerFontsize =CurrentADC.PropValue("markerFontsize")
Dim markerTextDistance =CurrentADC.PropValue("markerTextDistance")
Dim markerLineHeight =CurrentADC.PropValue("markerLineHeight")
Dim markerColour =CurrentADC.PropValue("markerColour")
Dim markerFontColour =CurrentADC.PropValue("markerFontColour")
Dim showMarkers =CurrentADC.PropValue("showMarkers")
Dim baseDropHoverColour =CurrentADC.PropValue("baseDropHoverColour")

Dim showTooltipOnHover =CurrentADC.PropValue("showTooltipOnHover")

Dim stackResponses =CurrentADC.PropValue("stackResponses")

IF responseHeight = "" Then
	responseHeight = "auto"
EndIF
IF responseWidth = "" Then
	responseWidth = "auto"
EndIF

Dim tooltipWidth =CurrentADC.PropValue("tooltipWidth")
Dim tooltipImageWidth =CurrentADC.PropValue("tooltipImageWidth")
Dim tooltipBgColour =CurrentADC.PropValue("tooltipBgColour")
Dim tooltipFontSize =CurrentADC.PropValue("tooltipFontSize")
Dim tooltipFontColour =CurrentADC.PropValue("tooltipFontColour")
Dim tooltipTextPadding =CurrentADC.PropValue("tooltipTextPadding")
Dim tooltipImagePadding =CurrentADC.PropValue("tooltipImagePadding")

Dim showTooltipCaption =CurrentADC.PropValue("showTooltipCaption")
Dim showTooltipImage =CurrentADC.PropValue("showTooltipImage")
Dim showTooltipValue =CurrentADC.PropValue("showTooltipValue")
Dim useResponseCaptions =CurrentADC.PropValue("useResponseCaptions")

%}

/* General */
#adc_{%= CurrentADC.InstanceId%} 
{ 
	text-align:{%= responseAlign%};
}

/* Reponses */
#adc_{%= CurrentADC.InstanceId%} .responseItem
{   
	
    cursor:pointer;
    
	box-sizing:border-box;
	/* Decoration */
	{% IF borderThickness = "none" Then %}
		border: none;
	{% Else %}
		border: {%= borderThickness%} {%= borderStyle%} rgb({%= borderColour%});
	{% EndIF %}	
	background: rgb({%= responseColourPrimary%}); 
	background: -moz-linear-gradient(top,  rgb({%= responseColourPrimary%}) 0%, rgb({%= responseColourSecondary%}) 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= responseColourPrimary%})), color-stop(100%,rgb({%= responseColourSecondary%}))); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  rgb({%= responseColourPrimary%}) 0%,rgb({%= responseColourSecondary%}) 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  rgb({%= responseColourPrimary%}) 0%,rgb({%= responseColourSecondary%}) 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  rgb({%= responseColourPrimary%}) 0%,rgb({%= responseColourSecondary%}) 100%); /* IE10+ */
	background: linear-gradient(to bottom,  rgb({%= responseColourPrimary%}) 0%,rgb({%= responseColourSecondary%}) 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= responseColourPrimary.ToHexa()%}, endColorstr={%= responseColourSecondary.ToHexa()%},GradientType=0 ); /* IE6-8 */
	
	/* Effects */
	-webkit-border-radius:	{%= borderRadius%}; 
	-moz-border-radius:		{%= borderRadius%}; 
	-khtml-border-radius:	{%= borderRadius%}; 
	border-radius:			{%= borderRadius%};
	
	-webkit-box-shadow: {%= responseShadow%};
	-moz-box-shadow: {%= responseShadow%};
	box-shadow: {%= responseShadow%};
	
	text-align: center;
		
	height: {%= responseHeight%};
	width: {%= responseWidth%};
	
	padding: {%= responsePadding%};
	{% IF stackResponses = "1" And responseAlign = "center" Then %}
		/*margin: 0px auto;*/
    	margin: {%= responseMargin%};
    	margin-left: auto;
    	margin-right: auto;
		float:none;
	{% Else %}
		margin: {%= responseMargin%};
		float:{%= responseAlign%};
    	{% IF responseAlign = "center" Then %}
    		display:inline-block;
    	{% EndIF %}	
	{% EndIF %}	
	
	z-index: 1;
}

#adc_{%= CurrentADC.InstanceId%} .responseItem:hover
{
	
	/* Decoration */
	{% IF showResponseHoverBorder = "1" Then %}
		border: {%= responseHoverBorderThickness%} {%= responseHoverBorderStyle%} rgb({%= responseHoverBorderColour%});
	{% EndIF %}
	{% IF showResponseHoverColour = "1" Then %}
		background: rgb({%= responseHoverColourPrimary%}) !important;
		background: -moz-linear-gradient(top,  rgb({%= responseHoverColourPrimary%}) 0%, rgb({%= responseHoverColourSecondary%}) 100%) !important; /* FF3.6+ */
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= responseHoverColourPrimary%})), color-stop(100%,rgb({%= responseHoverColourSecondary%}))) !important; /* Chrome,Safari4+ */
		background: -webkit-linear-gradient(top,  rgb({%= responseHoverColourPrimary%}) 0%,rgb({%= responseHoverColourSecondary%}) 100%) !important; /* Chrome10+,Safari5.1+ */
		background: -o-linear-gradient(top,  rgb({%= responseHoverColourPrimary%}) 0%,rgb({%= responseHoverColourSecondary%}) 100%) !important; /* Opera 11.10+ */
		background: -ms-linear-gradient(top,  rgb({%= responseHoverColourPrimary%}) 0%,rgb({%= responseHoverColourSecondary%}) 100%) !important; /* IE10+ */
		background: linear-gradient(to bottom,  rgb({%= responseHoverColourPrimary%}) 0%,rgb({%= responseHoverColourSecondary%}) 100%) !important; /* W3C */
		filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= responseHoverColourPrimary.ToHexa()%}', endColorstr='{%= responseHoverColourSecondary.ToHexa()%}',GradientType=0 ) !important; /* IE6-8 */
	{% EndIF %}
	-webkit-box-shadow: {%= responseHoverShadow%};
	-moz-box-shadow: {%= responseHoverShadow%};
	box-shadow: {%= responseHoverShadow%};
}

#adc_{%= CurrentADC.InstanceId%} .responseItem img
{  
	pointer-events:none;
	margin:0px auto;
	vertical-align:middle;
	float:{%= responseImageAlignment%};
	padding:{%= responseImagePadding%};
}

#adc_{%= CurrentADC.InstanceId%} .responseItem .response_text 
{ 
	pointer-events:none;
	display:{%= displayResponseText%};
	font-size:{%= fontSize%};
	text-align:{%= responseTextAlign%};
	color:rgb({%= fontColour%});
	
	padding:{%= responseTextPadding%};
	line-height:{%= responseTextLineHeight%};
	
	{% IF responseTextPosition = "left" or responseTextPosition = "right" Then %}
		float: {%= responseTextPosition%};
	{% EndIF %}
	
	word-wrap: break-word;
}

#adc_{%= CurrentADC.InstanceId%} .responseItem:hover .response_text
{ 
	{% IF showResponseHoverFontColour = "1" Then %}
		color:rgb({%= responseHoverFontColour%}) !important;
	{% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .responseActive { 
	/* Decoration */	
	{% IF responseSelectedBorderThickness = "none" Then %}
		border: none !important;
	{% Else %}
		border: {%= responseSelectedBorderThickness%} {%= responseSelectedBorderStyle%} rgb({%= responseSelectedBorderColour%}) !important;
	{% EndIF %}	
	background: rgb({%= responseSelectedColourPrimary%}) !important;
	background: -moz-linear-gradient(top,  rgb({%= responseSelectedColourPrimary%}) 0%, rgb({%= responseSelectedColourSecondary%}) 100%) !important; /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= responseSelectedColourPrimary%})), color-stop(100%,rgb({%= responseSelectedColourSecondary%}))) !important; /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  rgb({%= responseSelectedColourPrimary%}) 0%,rgb({%= responseSelectedColourSecondary%}) 100%) !important; /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  rgb({%= responseSelectedColourPrimary%}) 0%,rgb({%= responseSelectedColourSecondary%}) 100%) !important; /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  rgb({%= responseSelectedColourPrimary%}) 0%,rgb({%= responseSelectedColourSecondary%}) 100%) !important; /* IE10+ */
	background: linear-gradient(to bottom,  rgb({%= responseSelectedColourPrimary%}) 0%,rgb({%= responseSelectedColourSecondary%}) 100%) !important; /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='{%= responseSelectedColourPrimary.ToHexa()%}', endColorstr='{%= responseSelectedColourSecondary.ToHexa()%}',GradientType=0 ) !important; /* IE6-8 */
}
#adc_{%= CurrentADC.InstanceId%} .responseActive .response_text {
	color:rgb({%= responseSelectedFontColour%}) !important;
}

#adc_{%= CurrentADC.InstanceId%} .sliderContainer { 
	position:relative;
	text-align:{%= controlAlign%};
	{% IF controlAlign = "center" Then %}
		margin-left:auto;
		margin-right:auto;
	{% Else %}
		margin:0px;
		width:auto;
	{% EndIF %}
	
	margin-bottom:20px;
	overflow:visible;
}

#adc_{%= CurrentADC.InstanceId%} .slider { 
	position:relative;
	clear:left;
	/*width:100%;*/
	/*margin:0px auto;*/
}

#adc_{%= CurrentADC.InstanceId%} .slider tr, #adc_{%= CurrentADC.InstanceId%} .slider tr td { 
	min-height:0;
}

#adc_{%= CurrentADC.InstanceId%} .startArea {
	{% IF responseAlign = "center" Then %}
		text-align:center;
	{% EndIF %}
    height:auto;
}

#adc_{%= CurrentADC.InstanceId%} .sliderLabel { 
	
	/* Decoration */
	{% IF CurrentADC.PropValue("borderThickness") = "none" Then %}
		border: none;
	{% Else %}
		border: {%= labelBorderThickness%} {%= labelBorderStyle%} rgb({%= labelBorderColour%});
	{% EndIF %}	

	background: rgb({%= labelColourPrimary%}); 
	background: -moz-linear-gradient(top,  rgb({%= labelColourPrimary%}) 0%, rgb({%= labelColourSecondary%}) 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgb({%= labelColourPrimary%})), color-stop(100%,rgb({%= labelColourSecondary%}))); 
	background: -webkit-linear-gradient(top,  rgb({%= labelColourPrimary%}) 0%,rgb({%= labelColourSecondary%}) 100%); 
	background: -o-linear-gradient(top,  rgb({%= labelColourPrimary%}) 0%,rgb({%= labelColourSecondary%}) 100%);
	background: -ms-linear-gradient(top,  rgb({%= labelColourPrimary%}) 0%,rgb({%= labelColourSecondary%}) 100%);
	background: linear-gradient(to bottom,  rgb({%= labelColourPrimary%}) 0%,rgb({%= labelColourSecondary%}) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= labelColourPrimary.ToHexa()%}, endColorstr={%= labelColourSecondary.ToHexa()%},GradientType=0 );
	
	/* Effects */
	-webkit-border-radius:	{%= labelBorderRadius%}; 
	-moz-border-radius:		{%= labelBorderRadius%}; 
	-khtml-border-radius:	{%= labelBorderRadius%}; 
	border-radius:			{%= labelBorderRadius%};
	
	-webkit-box-shadow: {%= labelShadow%};
	-moz-box-shadow: {%= labelShadow%};
	box-shadow: {%= labelShadow%};
	
	display:{%= displayLabelText%};
	font-size:{%= fontSize%};
	{% IF CurrentADC.PropValue("textAlign") <> "lr" And CurrentADC.PropValue("textAlign") <> "rl" Then %}
		text-align:{%= textAlign%};
	{% End IF %}
	color:rgb({%= labelFontColour%});
	padding:{%= labelTextPadding%};
	line-height:{%= labelTextLineHeight%};
	
	position:relative;
	display:block;
}

#adc_{%= CurrentADC.InstanceId%} .left, #adc_{%= CurrentADC.InstanceId%} .right, .rightLabel, .leftLabel {
	width: {%= labelWidth%};  
	position:relative;
	display:block;
}

#adc_{%= CurrentADC.InstanceId%} { width:100%; }
#adc_{%= CurrentADC.InstanceId%} .leftLabel {
	position:relative; 
	display:block;
	margin: 0px; 
    
    width: {%= labelWidth%};  
   	
	{% IF CurrentADC.PropValue("textAlign") = "lr" OR CurrentADC.PropValue("textAlign") = "left" Then %}
		text-align:left;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" OR CurrentADC.PropValue("textAlign") = "right" Then %}
		text-align:right;
	{% ElseIF CurrentADC.PropValue("textAlign") = "center" Then %}
		text-align:center;
	{% EndIF %}
	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		margin-right:10px;
	{% EndIF %}
	
	/* disable highlight text */
	-moz-user-select: none; 
	-webkit-user-select: none; 
	-ms-user-select:none; 
	user-select:none;
}
#adc_{%= CurrentADC.InstanceId%} .rightLabel { 
	position:relative;
	display:block;
	margin: 0px;
    
    width: {%= labelWidth%};  
	
	{% IF CurrentADC.PropValue("textAlign") = "lr" OR CurrentADC.PropValue("textAlign") = "right" Then %}
		text-align:right;
	{% ElseIF CurrentADC.PropValue("textAlign") = "rl" OR CurrentADC.PropValue("textAlign") = "left" Then %}
		text-align:left;
	{% ElseIF CurrentADC.PropValue("textAlign") = "center" Then %}
		text-align:center;
	{% EndIF %}
	
	{% IF CurrentADC.PropValue("sliderOrientation") = "horizontal" Then %}
		margin-left:10px;
	{% EndIF %}
	
	/* disable highlight text */
	-moz-user-select: none; 
	-webkit-user-select: none; 
	-ms-user-select:none; 
	user-select:none;
}
#adc_{%= CurrentADC.InstanceId%} .leftLabel .sliderLabel {
	position:relative;
	display:block;
	text-align:center;
	
	/* disable highlight text */
	-moz-user-select: none; 
	-webkit-user-select: none; 
	-ms-user-select:none; 
	user-select:none;
    z-index:0;
}
#adc_{%= CurrentADC.InstanceId%} .rightLabel .sliderLabel {
	position:relative;
	display:block;
	text-align:center;
	
	/* disable highlight text */
	-moz-user-select: none; 
	-webkit-user-select: none; 
	-ms-user-select:none; 
	user-select:none;
    z-index:0;
    
}

#adc_{%= CurrentADC.InstanceId%} .caption {
	position:relative;
	text-align:{%= captionAlign%};
	font-size:{%= fontSize%};
	padding:{%= captionPadding%};
}

#adc_{%= CurrentADC.InstanceId%} img {
	padding:{%= imagePadding%};
	vertical-align: middle;	
}
#adc_{%= CurrentADC.InstanceId%} .lineContainer { position:relative; }
#adc_{%= CurrentADC.InstanceId%} .lineContainer .ui-widget-content { 
    
    /*box-sizing:border-box;*/
	/* Decoration */
	{% IF baseBorderThickness = "none" Then %}
		border: none;
	{% Else %}
    border: {%= baseBorderThickness%} {%= baseBorderStyle%} rgb({%= baseBorderColour%});
	{% EndIF %}	
    
    background: rgb({%= baseColourPrimary%}); 
    background: -moz-linear-gradient(left,  rgb({%= baseColourPrimary%}) 0%, rgb({%= baseColourSecondary%}) 100%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, right top, color-stop(0%,rgb({%= baseColourPrimary%})), color-stop(100%,rgb({%= baseColourSecondary%}))); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(left,  rgb({%= baseColourPrimary%}) 0%,rgb({%= baseColourSecondary%}) 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(left,  rgb({%= baseColourPrimary%}) 0%,rgb({%= baseColourSecondary%}) 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(left,  rgb({%= baseColourPrimary%}) 0%,rgb({%= baseColourSecondary%}) 100%); /* IE10+ */
	background: linear-gradient(to right,  rgb({%= baseColourPrimary%}) 0%,rgb({%= baseColourSecondary%}) 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr={%= baseColourPrimary.ToHexa()%}, endColorstr={%= baseColourSecondary.ToHexa()%},GradientType=0 ); /* IE6-8 */
}
/*#adc_{%= CurrentADC.InstanceId%} .lineContainer .ui-widget-content { border:none !important; background:none !important; }
*/
#adc_{%= CurrentADC.InstanceId%} .tooltip {
    position: absolute;
    /*z-index: 1020;*/
    display: block !important;
    padding: 5px 0;
    font-size: 11px;
    margin-top: -2px;
    bottom:120%;
    margin-left: {%= 0 + (handleWidth.ToNumber()/2) - (tooltipWidth.ToNumber()/2) %}px;
    opacity: 1;
    text-align:{%= responseTextAlign%};
    width:{%= tooltipWidth.ToNumber() %}px;
    
    {% IF showTooltipOnHover = "true" Then %}
    	bottom:90%;
        opacity: 0;
        transition-delay: 0ms, 0ms, 200ms;
        transition-duration: 200ms, 200ms, 0ms;
        transition-property: opacity, bottom, visibility;
        transition-timing-function: ease-in;
        visibility: hidden;
    {% EndIF %}
}

{% IF showTooltipOnHover = "true" Then %}
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle.ui-state-active .tooltip, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle.ui-state-focus .tooltip, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle.ui-state-hover .tooltip, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle:focus .tooltip, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle:hover .tooltip {
    opacity: 1;
    bottom:120%;
    transition-delay: 200ms, 200ms, 0ms;
    transition-timing-function: ease-out;
    visibility: visible;
}
{% EndIF %}

#adc_{%= CurrentADC.InstanceId%} .tooltip .response_text { 
	pointer-events:none;
	font-size:{%= tooltipFontSize%};
	text-align:{%= responseTextAlign%};
	color:rgb({%= tooltipFontColour%});
	padding:{%= tooltipTextPadding%};
	line-height:{%= responseTextLineHeight%};
    
    {% IF showTooltipCaption = "0" Then %}
    	display:none;
    {% EndIF %}
	
	{% IF responseTextPosition = "left" or responseTextPosition = "right" Then %}
		float: {%= responseTextPosition%};
	{% EndIF %}
	
	word-wrap: break-word;
}

#adc_{%= CurrentADC.InstanceId%} .tooltip .value_text {
	pointer-events:none;
	font-size:{%= tooltipFontSize%};
	text-align:{%= responseTextAlign%};
	color:rgb({%= tooltipFontColour%});
	padding:{%= tooltipTextPadding%};
	line-height:{%= responseTextLineHeight%};
    
{% IF showTooltipValue = "0" Then %}
    	display:none;
    {% EndIF %}
	
	{% IF responseTextPosition = "left" or responseTextPosition = "right" Then %}
		float: {%= responseTextPosition%};
	{% EndIF %}
	
	word-wrap: break-word;
}

#adc_{%= CurrentADC.InstanceId%} .tooltip img
{  
	pointer-events:none;
	margin:0px auto;
	vertical-align:middle;
	float:{%= responseImageAlignment%};
	padding:{%= tooltipImagePadding%};
    
    {% IF showTooltipImage = "0" Then %}
    	display:none;
    {% EndIF %}
}

#adc_{%= CurrentADC.InstanceId%} .tooltip .tooltip-arrow {
    bottom: 0;
    left: 50%;
    margin-left: -5px;
    border-top: 5px solid rgb({%= tooltipBgColour %});
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    position: absolute;
    width: 0;
    height: 0;
}

#adc_{%= CurrentADC.InstanceId%} .tooltip-inner {
    padding: 20px 8px 8px 8px;
    color: rgb({%= tooltipFontColour %});
    text-align:{%= responseTextAlign%};
    text-decoration: none;
    background-color: rgb({%= tooltipBgColour %});
    -webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
}

#adc_{%= CurrentADC.InstanceId%} .tooltip-inner img { height:auto; width:{%= tooltipImageWidth %}px; }

#adc_{%= CurrentADC.InstanceId%} .sliderMob, #adc_{%= CurrentADC.InstanceId%} .sliderPC { display:none; }

#adc_{%= CurrentADC.InstanceId%} .removeBtn {
    display: block;
    padding: 5px 9px;
    text-align: right; /* float right, clear both */
    z-index:11;
    font-size:20px;
    color:#fff;
    position:absolute;
    top:-10px;
    right:-15px;
    background:#000;
    border-radius:100%;
}

#adc_{%= CurrentADC.InstanceId%} .ui-state-default, #adc_{%= CurrentADC.InstanceId%} .ui-widget-content .ui-state-default, #adc_{%= CurrentADC.InstanceId%} .ui-widget-header .ui-state-default, #adc_{%= CurrentADC.InstanceId%} .ui-button, html #adc_{%= CurrentADC.InstanceId%} .ui-button.ui-state-disabled:hover, html #adc_{%= CurrentADC.InstanceId%} .ui-button.ui-state-disabled:active {
    background: rgb({%= handleColour %}) none repeat scroll 0 0;
    border: 1px solid rgb({%= handleBorderColour %});
    color: #454545;
}

#adc_{%= CurrentADC.InstanceId%} .ui-slider-horizontal {
    height: {%= baseHeight %}px;
}
#adc_{%= CurrentADC.InstanceId%} .ui-slider-horizontal .ui-slider-handle {
    margin-left: -{%= handleWidth.ToNumber()/2 %}px; /* 1/2 */
    top: {%= (baseHeight.ToNumber()/2) - (handleHeight.ToNumber()/2) - 1 %}px; /* 1/4 */
}
#adc_{%= CurrentADC.InstanceId%} .ui-slider .ui-slider-handle {
    cursor: pointer;
    height: {%= handleHeight %}px; /* 1 */
    width: {%= handleWidth %}px; /* 1 */
}

#adc_{%= CurrentADC.InstanceId%} .ui-corner-all, #adc_{%= CurrentADC.InstanceId%}  .ui-corner-bottom, #adc_{%= CurrentADC.InstanceId%} .ui-corner-right, #adc_{%= CurrentADC.InstanceId%} .ui-corner-br {
    border-bottom-right-radius: {%= handleBorderRadius %};
}
#adc_{%= CurrentADC.InstanceId%} .ui-corner-all, #adc_{%= CurrentADC.InstanceId%} .ui-corner-bottom, #adc_{%= CurrentADC.InstanceId%} .ui-corner-left, #adc_{%= CurrentADC.InstanceId%} .ui-corner-bl {
    border-bottom-left-radius: {%= handleBorderRadius %};
}
#adc_{%= CurrentADC.InstanceId%} .ui-corner-all, #adc_{%= CurrentADC.InstanceId%} .ui-corner-top, #adc_{%= CurrentADC.InstanceId%} .ui-corner-right, #adc_{%= CurrentADC.InstanceId%} .ui-corner-tr {
    border-top-right-radius: {%= handleBorderRadius %};
}
#adc_{%= CurrentADC.InstanceId%} .ui-corner-all, #adc_{%= CurrentADC.InstanceId%} .ui-corner-top, #adc_{%= CurrentADC.InstanceId%} .ui-corner-left, #adc_{%= CurrentADC.InstanceId%} .ui-corner-tl {
    border-top-left-radius: {%= handleBorderRadius %};
}

/* Distance of pips */

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pips .ui-slider-pip {
    top: {%= baseHeight.ToNumber() + markerDistance.ToNumber() + 3 %}px;
    font-size: {%= markerFontsize %}px !important;
}
 
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip .ui-slider-line {
  
    /* add height and other missing bits */
    height: {%= markerLineHeight%}px;
  	top: -3px;
    
    /* if circles */
    {% IF markerType = "circle" Then %}
        width: 4px;
        height: 4px;
        border-radius: 4px;
        margin-left: -2px;
    {% EndIf %}
    z-index:1;
    
    {% IF showMarkers = "no" Then %}
        display:none;
    {% EndIf %}
    
}
.ui-slider-pips .ui-slider-pip .ui-slider-line {
	background: rgb({%= markerColour %});
}

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pips .ui-slider-label {
    top: {%= markerTextDistance %}px;
    text-align:center;
    
    {% IF useResponseCaptions = "yes" Then %}
        margin-left: -2em;
        width: 4em;
    {% EndIf %}
}

/* alternating */
{% IF alternateMarkers = "1" Then %}
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip .ui-slider-line {
  height: {%= markerLineHeight%}px;
  top: -3px; 
    
  /* if circles */
  {% IF markerType = "circle" Then %}
      width: 4px;
      height: 4px;
      border-radius: 4px;
      margin-left: -2px;
  {% EndIf %}
}

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even) .ui-slider-label {
    top: auto;
    bottom: {%= markerTextDistance %}px;
}

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even) {
  top: {%= baseHeight.ToNumber() - 15 - markerDistance.ToNumber() - baseHeight.ToNumber() %}px;
  height: 15px;
  transform: scale(1) translateY(-3px);
  /*opacity: 0.8; */
}
  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even) .ui-slider-line {
    top:auto;
    bottom: -3px;
    height: {%= markerLineHeight%}px;
    
    /* if circles */
    {% IF markerType = "circle" Then %}
        width: 4px;
        height: 4px;
        border-radius: 4px;
        margin-left: -2px;
    {% EndIf %}
}
 /*  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even).ui-slider-pip-selected-1 .ui-slider-label, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even).ui-slider-pip-selected-2 .ui-slider-label, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even).ui-slider-pip-selected-3 .ui-slider-label, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip:nth-child(even).ui-slider-pip-selected-4 .ui-slider-label {
   top: -3px;
} */
                   
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-tip {
  width: 34px;
  margin-left: -17px;
  top: -1px;
  background: #00c7d7;
  color: white;
  border: none;
  line-height: 27px;
  height: 25px; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-tip:before, 
#adc_{%= CurrentADC.InstanceId%} .ui-slider-tip:after {
    display: none; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle.ui-state-active .ui-slider-tip,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle.ui-state-focus .ui-slider-tip,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle.ui-state-hover .ui-slider-tip,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle:focus .ui-slider-tip,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle:hover .ui-slider-tip {
  top: -1px; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-handle.ui-state-focus, #adc_{%= CurrentADC.InstanceId%} .ui-slider-handle.ui-state-hover {
  z-index: 100; }

{% EndIf %}

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-1 .ui-slider-label {
  color: #F44336; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-2 .ui-slider-label {
  color: #03A9F4; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-3 .ui-slider-label {
  color: #9C27B0; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-4 .ui-slider-label {
  color: #009688; }
  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-5 .ui-slider-label {
  color: #3F51B5; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-6 .ui-slider-label {
  color: #4CAF50; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-7 .ui-slider-label {
  color: #673AB7; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-8 .ui-slider-label {
  color: #00BCD4; }
  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-9 .ui-slider-label {
  color: #E91E63; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-initial-10 .ui-slider-label {
  color: #2196F3; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-1 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-2 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-3 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-4 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-5 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-6 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-7 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-8 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-9 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-10 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-11 .ui-slider-label,
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-12 .ui-slider-label {
  color: white;
  width: 2.4em;
  padding: 4px 0;
  margin-left: -1.2em;
  border-radius: 2px; }

#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-1 .ui-slider-label {
  color: #F44336; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-2 .ui-slider-label {
  color: #03A9F4; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-3 .ui-slider-label {
  color: #9C27B0; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-4 .ui-slider-label {
  color: #009688; }
  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-5 .ui-slider-label {
  color: #3F51B5; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-6 .ui-slider-label {
  color: #4CAF50; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-7 .ui-slider-label {
  color: #673AB7; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-8 .ui-slider-label {
  color: #00BCD4; }
  
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-9 .ui-slider-label {
  color: #E91E63; }
                    
#adc_{%= CurrentADC.InstanceId%} .ui-slider-pip-selected-10 .ui-slider-label {
  color: #2196F3; }

#adc_{%= CurrentADC.InstanceId%} .responseTargetLayer { display:block; width:100%; height:100%; position:absolute; top:0px; left:0px; z-index:10; }

#adc_{%= CurrentADC.InstanceId%} .dropTargetLayer {
    display:none; width:100%; height:100%; position:absolute; top:0px; left:0px; visibility:hidden; z-index:10000; background:url({%:= CurrentADC.URLTo("static/clear.png")%});
}